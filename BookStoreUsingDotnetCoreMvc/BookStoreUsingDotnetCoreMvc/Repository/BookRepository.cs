using BookStoreUsingDotnetCoreMvc.Data;
using BookStoreUsingDotnetCoreMvc.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace BookStoreUsingDotnetCoreMvc.Repository
{
    public class BookRepository
    {
        private readonly BookStoreContext _context = null;

        //Context is connection for Db which is already defined in startup.cs
        //Using services.AddDbContext<BookStoreContext> in ConfigureServices() method 
        public BookRepository(BookStoreContext context)
        {
            _context = context;
        }

        public async Task<int> AddNewBook(BookModel model)
        {
            var newBook = new Books()
            {
                Author = model.Author,
                CreatedOn = DateTime.UtcNow,
                Description = model.Description,
                Title = model.Title,
                TotalPages = model.TotalPages,
                UpdatedOn = DateTime.UtcNow
                //Category = model.Category,

            };

            await _context.Books.AddAsync(newBook);
            await _context.SaveChangesAsync();

            //After save change Id for the book will be generated by Db which we can return
            return newBook.Id;
        }
        public async Task<List<BookModel>> GetAllBooks()
        {
            var books = new List<BookModel>();
            var allbooks = await _context.Books.ToListAsync();
            //It is used to convert the each book from Db as BookModel type
            if(allbooks?.Any() == true)
            {
                foreach(var book in allbooks)
                {
                    books.Add(new BookModel()
                    {
                        Author = book.Author,
                        Category = book.Category,
                        Description = book.Description,
                        Id = book.Id,
                        Language = book.Language,
                        Title = book.Title,
                        TotalPages = book.TotalPages
                    });
                }
            }
            return books;
        }

        public async Task<BookModel> GetBookById(int id)
        {
            var book = await  _context.Books.FindAsync(id);
            if(book != null)
            {
                var bookDetails = new BookModel()
                {
                    Author = book.Author,
                    Category = book.Category,
                    Description = book.Description,
                    Id = book.Id,
                    Language = book.Language,
                    Title = book.Title,
                    TotalPages = book.TotalPages
                };
                return bookDetails;
            }
            return null;
        }

        public List<BookModel> SerachBook(string title, string authorName)
        {
            return DataSource().Where(x => x.Title.Contains(title) && x.Author.Contains(authorName)).ToList();
        }

        private List<BookModel> DataSource()
        {
            return new List<BookModel>()
            {
                new BookModel(){Id =1, Title="MVC", Author="Nitish", Description="This is the description for the MVC book", Category="Programming", Language="English", TotalPages=134},
                new BookModel(){Id =2, Title="C#", Author="Moni", Description="This is the description for the C# book", Category="FrameWork", Language="Hindi", TotalPages=334},
                new BookModel(){Id =3, Title="Java", Author="Roni", Description="This is the description for the Java book", Category="Developer", Language="English", TotalPages=894},
                new BookModel(){Id =4, Title="Php", Author="Tony", Description="This is the description for the Php book", Category="Programming", Language="English", TotalPages=134}

            };
        }
    }

}
